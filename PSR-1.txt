PHP Tags
Use the long <?php ?> tags or the short-echo <?= ?> tags.

Character Encoding
MUST use only UTF-8 without BOM.

Side Effects
The phrase "side effects" means execution of logic not directly related to declaring classes, functions, constants, etc., merely from including the file.
"Side effects" include but are not limited to: generating output, explicit use of require or include, connecting to external services, modifying ini settings, emitting errors or exceptions, modifying global or static variables, reading from or writing to a file, and so on

A file SHOULD declare new symbols (classes, functions, constants, etc.) and cause no other side effects, or it SHOULD execute logic with side effects, but SHOULD NOT do both.

Following is an example of a file with both declarations and side effects; i.e, an example of what to avoid:
<?php
// side effect: change ini settings
ini_set('error_reporting', E_ALL);

// side effect: loads a file
include "file.php";

// side effect: generates output
echo "<html>\n";

// declaration
function foo()
{
    // function body
}

Following example is of a file that contains declarations without side effects; i.e., an example of what to emulate:
<?php
// declaration
function foo()
{
    // function body
}

// conditional declaration is *not* a side effect
if (! function_exists('bar')) {
    function bar()
    {
        // function body
    }
}

Namespace and Class Names
Namespaces and classes MUST follow an "autoloading”.
This means each class is in a file by itself, and is in a namespace of at least one level: a top-level vendor name.
Class names MUST be declared in StudlyCaps.
Code written for PHP 5.3 and after MUST use formal namespaces.

<?php
// PHP 5.3 and later:
namespace Vendor\Model;

class Foo
{
}
Code written for 5.2.x and before SHOULD use the pseudo-namespacing convention of Vendor_ prefixes on class names.
<?php
// PHP 5.2.x and earlier:
class Vendor_Model_Foo
{
}

Class Constants, Properties, and Methods
The term "class" refers to all classes, interfaces, and traits.

Constants
Class constants MUST be declared in all upper case with underscore separators. For example:
<?php
namespace Vendor\Model;

class Foo
{
    const VERSION = '1.0';
    const DATE_APPROVED = '2012-06-01';
}

Properties
This guide intentionally avoids any recommendation regarding the use of $StudlyCaps, $camelCase, or $under_scoreproperty names.
Whatever naming convention is used SHOULD be applied consistently within a reasonable scope. That scope may be vendor-level, package-level, class-level, or method-level.

Methods
Method names MUST be declared in camelCase().
